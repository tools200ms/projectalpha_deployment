#!/bin/sh

# Arguments:
# ./qemu-wrap-rasppi raspios-bookworm-arm64-lite.img kernel8.img initramfs8
# ./qemu-wrap-rasppi alpine-rpi-3.20.2-aarch64.img boot/vmlinuz-rpi boot/initramfs-rpi


[ -n "$PRETEND" ] && [[ $(echo "$PRETEND" | tr '[:upper:]' '[:lower:]') =~ ^y|yes|1|on$ ]] && \
        RUN="echo" || RUN=

[ -n "$DEBUG" ] && [[ $(echo "$DEBUG" | tr '[:upper:]' '[:lower:]') =~ ^y|yes|1|on$ ]] && \
        set -xe || set -e

function first_arg() {
  echo $1
}

ONE_MIB=$(( 1024 * 1024 ))
ONE_GIB=$(( 1024 * $ONE_MIB ))

BOOT_FS_OFFSET=$(( 8192 * 512 ))


BOOT_MNT_DIR="/mnt/left"

CACHE_DIR="/var/cache/pilinux"
mkdir -p $CACHE_DIR

# sd-card size must be of power 2, e.g.:
# 512MiB, 1GiB, 2GiB, 4GiB ...
# Append extra 'zeros' to an end of an
# image file to ensure that its size is
# exactly 2^<power> bites.
function prepare_mmc_imgfile() {
  IMAGE_PATH="$1"
  CACHE_FILE=$CACHE_DIR/$(basename $IMAGE_PATH)

  if [ ! -f "$CACHE_FILE" ] ; then
    cp "$IMAGE_PATH" $CACHE_FILE
  fi

  CUR_SIZE=$(first_arg $(du -sb $CACHE_FILE))

  POW=$(( 256*1024*1024 ))

  while [ $POW -lt $CUR_SIZE ]; do
    POW=$(($POW*2))
    #echo $POW
  done

  REM_SIZE_TOPOW=$(($POW - $CUR_SIZE))

  # if zero file is of a proper size already

  if [ $REM_SIZE_TOPOW -ne 0 ]; then
    #echo "Appending file with extra 'zeros' to reach size that is a power of 256 MiB (requirment for SD cards)"
    #echo "Appending by: $REM_SIZE_TOPOW bytes"
    #echo "Final size: $(($REM_SIZE_TOPOW + $CUR_SIZE)) bytes"

    # make file size to be multiple of MB:
    TAIL=$(( ($REM_SIZE_TOPOW % $ONE_MIB) ))

    # init is in bytes
    if [ $TAIL -ne 0 ]; then
      dd bs=1 seek=$CUR_SIZE if=/dev/zero of=$CACHE_FILE count=$TAIL
    fi

    # change units to MiB
    CUR_SIZE=$(( ($CUR_SIZE + $TAIL) / $ONE_MIB ))
    TAIL=$(($REM_SIZE_TOPOW / $ONE_MIB))

    if [ $TAIL -ne 0 ]; then
      dd bs=$ONE_MIB seek=$CUR_SIZE if=/dev/zero of=$CACHE_FILE count=$TAIL
    fi
  fi

  echo $CACHE_FILE
}

#function get_working_file

IMG_FILE="$1"
KERNEL=$2
INITRAMFS=$3

if [ $(id -u) -ne 0 ]; then
  echo "Run it as root"
  echo "    sorry for disturbing safe realm"
  exit 0
fi

if [ ! -f "$IMG_FILE" ]; then
  echo "Provide image file path"
  exit 1
fi

if [ -z "$KERNEL" ] || [ -z "$INITRAMFS" ]; then
  echo "Provide kernel and initramfs file names"
  exit 1
fi

WORK_IMG=$(prepare_mmc_imgfile "$IMG_FILE")
KERNEL_PARAMS="console=tty1 console=ttyAMA1 root=/dev/mmcblk0p2 rw"
# console=ttyAMA1

MOUNT_BOOT=0

PART_CNT=$(fdisk -l $WORK_IMG | grep $(basename $WORK_IMG) | wc -l)

if [ $PART_CNT -eq 3 ]; then
  KERNEL_PARAMS="$KERNEL_PARAMS root=/dev/mmcblk0p2 rw"
elif [ $PART_CNT -eq 2 ]; then
  KERNEL_PARAMS="$KERNEL_PARAMS modules=loop,squashfs,sd-mod,usb-storage"
else
  echo "Partion table not found"
  exit 1
fi


if [ $MOUNT_BOOT -eq 1 ]; then
  # Get avaliable loop device, normally '/dev/loop0'
  LOBOOT_DEV=$(sudo losetup -f)
  # Create device for mounting partition that will be used as 'boot'
  losetup $LOBOOT_DEV $WORK_IMG
  partprobe -s $LOBOOT_DEV

  # mount first partition, or if no partition table mount filesystem directly
  if [ -e ${LOBOOT_DEV}p1 ]; then
    mount ${LOBOOT_DEV}p1 $BOOT_MNT_DIR
  else
    mount ${LOBOOT_DEV} $BOOT_MNT_DIR
  fi
fi

if [ ! -f "$BOOT_MNT_DIR/$KERNEL" ]; then
  echo "Wrong kernel image name, or no file referred to"
  exit 2
fi

if [ ! -f "$BOOT_MNT_DIR/$INITRAMFS" ]; then
  echo "Wrong kernel image name, or no file referred to"
  exit 2
fi

if [ ! -f "$BOOT_MNT_DIR/bcm2710-rpi-3-b.dtb" ]; then
  echo "No DTB file"
  exit 3
fi

#   -chardev socket,id=com0,path=/tmp/builder1.sock,server=on,wait=off \
# mount /dev/loop1p2 /mnt/dir
# cd /mnt/dir
# rm ./systemd/system/multi-user.target.wants/userconfig.service
#

# looks like system does not create /dev/ttyAMA0 device,
# as a result only boot messages are print, can't login
# All (Ethernet and mass storage) USB devices running at USB 1.1 speed
# slow, but works well and no rush
$RUN qemu-system-aarch64 \
  -M raspi3b \
  -cpu cortex-a53 \
  -m 1024 \
  -serial pty \
  -kernel $BOOT_MNT_DIR/$KERNEL \
  -initrd $BOOT_MNT_DIR/$INITRAMFS \
  -append "$KERNEL_PARAMS" \
  -drive id=sysdrive,if=none,format=raw,file=$WORK_IMG \
  -device sd-card,drive=sysdrive \
  -usb \
  -device usb-kbd,bus=usb-bus.0 \
  -netdev user,id=net0,hostfwd=tcp::15022-:22 \
  -device usb-net,bus=usb-bus.0,netdev=net0 \
  -drive id=imgout0,if=none,format=raw,file=../flavors/pi--linux.iso \
  -device usb-storage,bus=usb-bus.0,drive=imgout0 \
  -dtb $BOOT_MNT_DIR/bcm2710-rpi-3-b.dtb \
  -rtc base=localtime \
  -name "Raspberry Pi emulator"

umount $BOOT_MNT_DIR
losetup -d $LOBOOT_DEV
