#!/sbin/openrc-run
# Auto-installation service, to be run at the beginning to perform setup.
# If installation is successful, script is not called again.

# Setup configuration BEGIN

# <==- Edition specific variable declarations place holder, do NOT remove NOR edit this commend -==>

# END OF Setup configuration

RUN=

# Checkout for --dry-run flag
for arg in "$@"; do
  case "$arg" in
    --dry-run|-Z)
      RUN="einfo [pretend] "
      break
      ;;
  esac
done

echo "Hello"

# read kernel options
init_KOPT() {
	eval "set -- $(cat /proc/cmdline 2>/dev/null)"
	for opt; do
		case "$opt" in
			ssh_*=*)
				eval "KOPT_${opt%%=*}='${opt#*=}'" ;;
		esac
	done
}

blkd_check_sizes() {
    local sys_blkd=$1
    local root_blkd=$2

    # sizes in bytes ('--getsize64' option returns bytes):
    local bdev_size=
    local part_sum_size=0

    for blkd in $(ls ${sys_blkd}*); do
        if [ "${blkd}" == "${sys_blkd}" ]; then
            bdev_size=$(blockdev --getsize64 ${sys_blkd})
            continue;
        fi
        part_sum_size=(( $(blockdev --getsize64 ${blkd}) + ${part_sum_size} ))
    done

    echo "DIFF: ((bdev_size-part_sum_size))"
    echo "    $bdev_size $part_sum_size"
}

blkd_grow_fs() {
    local sys_blkd=$1
    local root_blkd=$2

    $RUN fdisk ${sys_blkd} <<EOF
d
2
n
p
2


N
w
EOF

    partprobe ${sys_blkd}

    $RUN resize2fs ${root_blkd}
}

check_blockdev() {
    ROOT_DEV_BLOCK=$(realpath /dev/root)
    SYSTEM_DEV_BLOCK="/dev/$(lsblk -no pkname ${ROOT_DEV_BLOCK})"

    blkd_check_sizes ${SYSTEM_DEV_BLOCK} ${ROOT_DEV_BLOCK}
}

check_devd {
    echo $DEVD
}

start() {
    ebegin "Starting ${RC_SVCNAME}"

    ls -aFl /boot
    check_blockdev
    check_devd

    echo $RUN
	$RUN rm -f /etc/runlevels/*/$RC_SVCNAME

	init_KOPT
	local rc=0

	if [ -n "$KOPT_ssh_key" ] && [ ! -f "/root/.ssh/authorized_keys" ]; then
		einfo "Fetching ssh keys"
		mkdir -pm 700 /root/.ssh
		checkpath -fm 0600 /root/.ssh/authorized_keys
		case "$KOPT_ssh_key" in
			https://*|ftps://*|http://*)
				wget -q "$KOPT_ssh_key" -O /root/.ssh/authorized_keys
				rc=$?;;
			*) echo "$KOPT_ssh_key" > /root/.ssh/authorized_keys;;
		esac
	fi

	#
	eend $rc
}

